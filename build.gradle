buildscript {
	ext {
		springBootVersion = '1.3.5.RELEASE'
		jyallRepoBase = "http://10.10.10.60:8081/nexus/content"
	}
	repositories {
		mavenLocal()
		maven(){url "${jyallRepoBase}/groups/public"}
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'spring-boot'

def releaseName = 'fs-highgo-cart'
def releaseVersion = '0.0.1-SNAPSHOT'

jar {
	baseName = releaseName
	version = releaseVersion
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenLocal()
	maven(){url "${jyallRepoBase}/groups/public"}
	mavenCentral()
}

task releaseJar(type: Jar) {
	baseName releaseName
	from sourceSets.main.output
	exclude "**/demo/**", "**/*.yml", "**/*.xml", "**/*.sql"
	manifest {
		attributes(
				"Created-By" : "${System.getProperty('java.version')} (${System.getProperty('java.specification.vendor')})",
				"Implementation-Version" : releaseVersion
		)
	}
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId "com.jyall"
			artifactId releaseName
			version releaseVersion
			from components.java
			artifacts.clear()

			artifacts = [releaseJar]
		}

		all {
			pom.withXml {
				asNode().dependencies."*".findAll() {
					it.scope.text() == "runtime" && project.configurations.compile.allDependencies.find { dep ->
						dep.name == it.artifactId.text()
					}
				}.each {
					it.scope*.value = "compile"
				}
			}
		}
	}

	repositories {
		maven {
			url "${jyallRepoBase}/repositories/jsjy-${releaseVersion.endsWith('-SNAPSHOT') ? 'snapshot' : 'release' }"
			credentials {
				username = "deploy"
				password = "eBbef58C"
			}
		}
	}
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter')
	//common
	compile ("com.jyall:jyall-commons-ms:0.1.0-SNAPSHOT")
	//data
	compile ("org.springframework.data:spring-data-mongodb")
	//swagger
	compile("com.wordnik:swagger-jersey2-jaxrs_2.10:1.3.8") {
		exclude(module: 'jsr311-api')
	}

	testCompile('org.springframework.boot:spring-boot-starter-test')
}


eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}
apply plugin: 'maven'